'use strict';
require('dotenv').config();
const express = require('express');
const myDB = require('./connection');
const ObjectID = require('mongodb').ObjectID;
const fccTesting = require('./freeCodeCamp/fcctesting.js');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local');
//To make a query search for a Mongo _id, you will have to create const ObjectID = require('mongodb').ObjectID;, 
//and then to use it you call new ObjectID(THE_ID)
const app = express();
app.set('view engine', 'pug') //add app.set after app is initialized

fccTesting(app); //For FCC testing purposes
app.use('/public', express.static(process.cwd() + '/public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// app.route('/').get((req, res) => {
//   res.render(process.cwd() + '/views/pug/index', {
//     title: 'Hello',
//     message: 'Please login'
//   });
// });

app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: true,
  saveUninitialized: true,
  cookie: { secure: false }
}));

app.use(passport.initialize());
app.use(passport.session());

myDB(async client => {
  const myDataBase = await client.db('database').collection('users');
  //console.log('connected to db')
  // Be sure to change the title
  app.route('/').get((req, res) => {
    //Change the response to render the Pug template
    res.render('pug', {
      title: 'Connected to Database',
      message: 'Please login',
      showLogin: true
    });
  });

  passport.serializeUser((user, done) => {
    done(null, user._id);
  });
  //The serializeUser is called with 2 arguments, the full user object and a 
  //callback used by passport. A unique key to identify that user should be 
  //returned in the callback, the easiest one to use being the user's _id in the object. 
  //It should be unique as it is generated by MongoDB. Similarly, deserializeUser 
  //is called with that key and a callback function for passport as well, but, this time, we 
  //have to take that key and return the full user object to the callback. 

  passport.deserializeUser((id, done) => {
    myDataBase.findOne({ _id: new ObjectID(id) }, (err, doc) => {
      done(null, doc);
    });
  });

  //add the route 'login' to accept a POST request.
  //to authenticate on this rouate, add middleware: 'passport.authenticate('local')
  app.route("/login").post(passport.authenticate("local", { failureRedirect: '/' }),
    (req, res) => {
      res.render('/profile');
    }
  );

  //prevent user from just jumping to /profile without being logged in -- 
  //create ensureAuthenticated middleware, GET this in the /profile route
  function ensureAuthenticated(req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    }
    res.redirect('/');
  };

  app.route('/profile')
    .get(ensureAuthenticated, (req, res) => {
      res.render(process.cwd() + '/views/pug/profile', {username: req.user.username});
    });

  //Now you will have to tell passport to use an instantiated LocalStrategy object with a few settings defined.
  passport.use(new LocalStrategy(
    function (username, password, done) {
      myDataBase.findOne({ username: username }, function (err, user) {
        console.log('User ' + username + ' attempted to log in.');
        if (err) { return done(err); }
        if (!user) { return done(null, false); }
        if (password !== user.password) { return done(null, false); }
        return done(null, user);
      });
    }
  ));
  //This is defining the process to use when we try to authenticate someone locally. First, it tries to find a user in our database with the username entered, then it checks for the password to match, then finally, if no errors have popped up that we checked for, like an incorrect password, the user's object is returned and they are authenticated.

}).catch(e => {
  app.route('/').get((req, res) => {
    res.render('pug', { title: e, message: 'Unable to login' });
  });
});
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log('Listening on port ' + PORT);
});
